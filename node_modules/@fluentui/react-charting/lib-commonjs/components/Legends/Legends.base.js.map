{"version":3,"file":"Legends.base.js","sourceRoot":"../src/","sources":["components/Legends/Legends.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { IContextualMenuItem } from '@fluentui/react/lib/ContextualMenu';\nimport { HoverCard, HoverCardType, IExpandingCardProps } from '@fluentui/react/lib/HoverCard';\nimport { classNamesFunction, find, getNativeProps, buttonProperties } from '@fluentui/react/lib/Utilities';\nimport { ResizeGroup } from '@fluentui/react/lib/ResizeGroup';\nimport { IProcessedStyleSet } from '@fluentui/react/lib/Styling';\nimport { OverflowSet, IOverflowSetItemProps } from '@fluentui/react/lib/OverflowSet';\nimport { FocusZone, FocusZoneDirection } from '@fluentui/react-focus';\nimport {\n  ILegend,\n  ILegendsProps,\n  LegendShape,\n  ILegendsStyles,\n  ILegendStyleProps,\n  ILegendOverflowData,\n} from './Legends.types';\nimport { Shape } from './shape';\n\nimport { silceOrAppendToArray } from '../../utilities/utilities';\n\nconst getClassNames = classNamesFunction<ILegendStyleProps, ILegendsStyles>();\n\n// This is an internal interface used for rendering the legends with unique key\ninterface ILegendItem extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  name?: string;\n  title: string;\n  action: VoidFunction;\n  hoverAction: VoidFunction;\n  onMouseOutAction: VoidFunction;\n  color: string;\n  shape?: LegendShape;\n  key: number;\n  opacity?: number;\n  stripePattern?: boolean;\n  isLineLegendInBarChart?: boolean;\n}\n\nexport interface ILegendState {\n  selectedLegend: string;\n  activeLegend: string;\n  isHoverCardVisible: boolean;\n  selectedLegends: string[];\n}\nexport class LegendsBase extends React.Component<ILegendsProps, ILegendState> {\n  private _hoverCardRef: HTMLDivElement;\n  private _classNames: IProcessedStyleSet<ILegendsStyles>;\n\n  public constructor(props: ILegendsProps) {\n    super(props);\n    this.state = {\n      selectedLegend: '',\n      activeLegend: '',\n      isHoverCardVisible: false,\n      selectedLegends: [],\n    };\n  }\n\n  public render(): JSX.Element {\n    const { theme, className, styles } = this.props;\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n    const dataToRender = this._generateData();\n    return (\n      <div className={this._classNames.root}>\n        {this.props.enabledWrapLines ? (\n          this._onRenderData(dataToRender)\n        ) : (\n          <ResizeGroup\n            data={dataToRender}\n            onReduceData={this._onReduceData}\n            onRenderData={this._onRenderData}\n            onGrowData={this._onGrowData}\n          />\n        )}\n      </div>\n    );\n  }\n\n  private _generateData(): ILegendOverflowData {\n    const { allowFocusOnLegends = true } = this.props;\n    const dataItems: ILegendItem[] = this.props.legends.map((legend: ILegend, index: number) => {\n      return {\n        ...(allowFocusOnLegends && {\n          nativeButtonProps: getNativeProps<React.HTMLAttributes<HTMLButtonElement>>(legend, buttonProperties, [\n            'title',\n          ]),\n          'aria-setsize': this.props.legends.length,\n          'aria-posinset': index + 1,\n        }),\n        title: legend.title,\n        action: legend.action!,\n        hoverAction: legend.hoverAction!,\n        onMouseOutAction: legend.onMouseOutAction!,\n        color: legend.color,\n        shape: legend.shape,\n        stripePattern: legend.stripePattern,\n        isLineLegendInBarChart: legend.isLineLegendInBarChart,\n        opacity: legend.opacity,\n        key: index,\n      };\n    });\n    const result: ILegendOverflowData = {\n      primary: dataItems,\n      overflow: [],\n    };\n    return result;\n  }\n\n  private _onRenderData = (data: IOverflowSetItemProps | ILegendOverflowData): JSX.Element => {\n    const { overflowProps, allowFocusOnLegends = true } = this.props;\n    const rootStyles = {\n      root: {\n        justifyContent: this.props.centerLegends ? 'center' : 'unset',\n        flexWrap: 'wrap',\n      },\n    };\n    return (\n      <FocusZone {...(allowFocusOnLegends && { role: 'listbox', 'aria-label': 'Legends' })}>\n        <OverflowSet\n          items={data.primary}\n          overflowItems={data.overflow}\n          onRenderItem={this._renderButton}\n          onRenderOverflowButton={this._renderOverflowItems}\n          {...overflowProps}\n          styles={{ ...rootStyles, ...overflowProps?.styles }}\n        />\n      </FocusZone>\n    );\n  };\n\n  private _onReduceData = (currentdata: IOverflowSetItemProps): {} | void => {\n    if (currentdata.primary.length === 0) {\n      return;\n    }\n    const overflow = [...currentdata.primary.slice(-1), ...currentdata.overflow];\n    const primary = currentdata.primary.slice(0, -1);\n    return { primary, overflow };\n  };\n\n  private _onGrowData = (currentdata: IOverflowSetItemProps): {} | void => {\n    if (currentdata.overflow.length === 0) {\n      return;\n    }\n    const overflow = currentdata.overflow.slice(1);\n    const primary = [...currentdata.primary, ...currentdata.overflow.slice(0, 1)];\n    return { primary, overflow };\n  };\n\n  /**\n   * This function will get called when there is an ability to\n   * select  multiple legends\n   * @param legend ILegend\n   */\n  private _canSelectMultipleLegends = (legend: ILegend): void => {\n    const selectedLegends = silceOrAppendToArray(this.state.selectedLegends, legend.title);\n    this.setState({\n      //check if user selected all legends then empty it get the default behaviour\n      selectedLegends: selectedLegends.length === this.props.legends.length ? [] : selectedLegends,\n    });\n  };\n\n  /**\n   * This function will get called when there is\n   * ability to select only single legend\n   * @param legend ILegend\n   */\n\n  private _canSelectOnlySingleLegend = (legend: ILegend): void => {\n    if (this.state.selectedLegend === legend.title) {\n      this.setState({\n        selectedLegend: '',\n      });\n    } else {\n      this.setState({\n        selectedLegend: legend.title,\n      });\n    }\n  };\n\n  private _onClick = (legend: ILegend): void => {\n    if (legend.action) {\n      const { canSelectMultipleLegends = false } = this.props;\n      if (canSelectMultipleLegends) {\n        this._canSelectMultipleLegends(legend);\n      } else {\n        this._canSelectOnlySingleLegend(legend);\n      }\n      legend.action();\n    }\n  };\n\n  private _onRenderCompactCard = (expandingCard: IExpandingCardProps): JSX.Element => {\n    const { allowFocusOnLegends = true, className, styles, theme } = this.props;\n    const overflowHoverCardLegends: JSX.Element[] = [];\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n    expandingCard.renderData.forEach((legend: IOverflowSetItemProps, index: number) => {\n      const hoverCardElement = this._renderButton(legend, index, true);\n      overflowHoverCardLegends.push(hoverCardElement);\n    });\n    const hoverCardData = (\n      <FocusZone\n        {...(allowFocusOnLegends && { role: 'listbox' })}\n        direction={FocusZoneDirection.vertical}\n        {...this.props.focusZonePropsInHoverCard}\n        className={classNames.hoverCardRoot}\n      >\n        {overflowHoverCardLegends}\n      </FocusZone>\n    );\n    return hoverCardData;\n  };\n\n  private _renderOverflowItems = (legends: ILegend[]) => {\n    const { allowFocusOnLegends = true } = this.props;\n    const items: IContextualMenuItem[] = [];\n    legends.forEach((legend: ILegend, i: number) => {\n      items.push({ key: i.toString(), name: legend.title, onClick: legend.action });\n    });\n    const renderOverflowData: IExpandingCardProps = { renderData: legends };\n    const { theme, className, styles, overflowText } = this.props;\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n    const plainCardProps = {\n      onRenderPlainCard: this._onRenderCompactCard,\n      renderData: renderOverflowData,\n    };\n\n    const overflowString = overflowText ? overflowText : 'more';\n    // execute similar to \"_onClick\" and \"_onLeave\" logic at HoverCard onCardHide event\n    const onHoverCardHideHandler = () => {\n      this.setState({ isHoverCardVisible: false });\n      /** Unhighlight the focused legend in the hover card */\n      const activeOverflowItem = find(legends, (legend: ILegend) => legend.title === this.state.activeLegend);\n      if (activeOverflowItem) {\n        this.setState({ activeLegend: '' });\n        if (activeOverflowItem.onMouseOutAction) {\n          activeOverflowItem.onMouseOutAction();\n        }\n      }\n    };\n    return (\n      <HoverCard\n        type={HoverCardType.plain}\n        plainCardProps={plainCardProps}\n        instantOpenOnClick={true}\n        // eslint-disable-next-line react/jsx-no-bind\n        onCardHide={onHoverCardHideHandler}\n        setInitialFocus={true}\n        trapFocus={true}\n        onCardVisible={this._hoverCardVisible}\n        styles={classNames.subComponentStyles.hoverCardStyles}\n        cardDismissDelay={300}\n        target={this._hoverCardRef}\n      >\n        <div\n          className={classNames.overflowIndicationTextStyle}\n          ref={(rootElem: HTMLDivElement) => (this._hoverCardRef = rootElem)}\n          {...(allowFocusOnLegends && {\n            role: 'button',\n            'aria-expanded': this.state.isHoverCardVisible,\n            'aria-label': `${items.length} ${overflowString}`,\n          })}\n          data-is-focusable={allowFocusOnLegends}\n        >\n          {items.length} {overflowString}\n        </div>\n      </HoverCard>\n    );\n  };\n\n  private _hoverCardVisible = () => {\n    this.setState({ isHoverCardVisible: true });\n  };\n\n  private _onHoverOverLegend = (legend: ILegend) => {\n    if (legend.hoverAction) {\n      this.setState({ activeLegend: legend.title });\n      legend.hoverAction();\n    }\n  };\n\n  private _onLeave = (legend: ILegend) => {\n    if (legend.onMouseOutAction) {\n      this.setState({ activeLegend: '' });\n      legend.onMouseOutAction();\n    }\n  };\n\n  private _renderButton = (data: IOverflowSetItemProps, index?: number, overflow?: boolean) => {\n    const { allowFocusOnLegends = true } = this.props;\n    const legend: ILegend = {\n      title: data.title,\n      color: data.color,\n      shape: data.shape,\n      action: data.action,\n      hoverAction: data.hoverAction,\n      onMouseOutAction: data.onMouseOutAction,\n      stripePattern: data.stripePattern,\n      isLineLegendInBarChart: data.isLineLegendInBarChart,\n      opacity: data.opacity,\n    };\n    const color = this._getColor(legend.title, legend.color);\n    const { theme, className, styles } = this.props;\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      colorOnSelectedState: color,\n      borderColor: legend.color,\n      overflow: overflow,\n      stripePattern: legend.stripePattern,\n      isLineLegendInBarChart: legend.isLineLegendInBarChart,\n      opacity: legend.opacity,\n    });\n    const onClickHandler = () => {\n      this._onClick(legend);\n    };\n    const onHoverHandler = () => {\n      this._onHoverOverLegend(legend);\n    };\n    const onMouseOut = () => {\n      this._onLeave(legend);\n    };\n    const shape = this._getShape(classNames, legend, color);\n    return (\n      <button\n        {...(allowFocusOnLegends && {\n          'aria-selected': this.state.selectedLegend === legend.title,\n          role: 'option',\n          'aria-label': `${legend.title} selected`,\n          'aria-setsize': data['aria-setsize'],\n          'aria-posinset': data['aria-posinset'],\n        })}\n        {...(data.nativeButtonProps && { ...data.nativeButtonProps })}\n        key={index}\n        className={classNames.legend}\n        onClick={onClickHandler}\n        onMouseOver={onHoverHandler}\n        onMouseOut={onMouseOut}\n        onFocus={onHoverHandler}\n        onBlur={onMouseOut}\n        data-is-focusable={allowFocusOnLegends}\n        /* eslint-enable react/jsx-no-bind */\n      >\n        {shape}\n        <div className={classNames.text}>{legend.title}</div>\n      </button>\n    );\n  };\n\n  private _getShape(\n    classNames: IProcessedStyleSet<ILegendsStyles>,\n    legend: ILegend,\n    color: string,\n  ): React.ReactNode | string {\n    const svgParentProps: React.SVGAttributes<SVGElement> = {\n      className: classNames.shape,\n    };\n    const svgChildProps: React.SVGAttributes<SVGElement> = {\n      fill: color,\n      strokeWidth: 2,\n      stroke: legend.color,\n    };\n    return (\n      <Shape\n        svgProps={svgParentProps}\n        pathProps={svgChildProps}\n        shape={legend.shape as LegendShape}\n        classNameForNonSvg={classNames.rect}\n      />\n    );\n  }\n\n  private _getColor(title: string, color: string): string {\n    const { theme } = this.props;\n    const { palette } = theme!;\n    let legendColor = color;\n    const inSelectedState = this.state.selectedLegend !== '' || this.state.selectedLegends.length > 0;\n    if (inSelectedState) {\n      /** if one or more legends are selected */\n      if (this.state.selectedLegend === title || this.state.selectedLegends.indexOf(title) > -1) {\n        /** if the given legend (title) is one of the selected legends */\n        legendColor = color;\n      } else {\n        /** if the given legend is unselected */\n        legendColor = palette.white;\n      }\n    } else {\n      /** if no legend is selected */\n      if (this.state.activeLegend === title || this.state.activeLegend === '') {\n        /**\n         * if the given legend is hovered\n         * or none of the legends is hovered\n         */\n        legendColor = color;\n      } else {\n        /** if there is a hovered legend but the given legend is not the one */\n        legendColor = palette.white;\n      }\n    }\n    return legendColor;\n  }\n}\n"]}