{"version":3,"file":"HeatMapChart.base.js","sourceRoot":"../src/","sources":["components/HeatMapChart/HeatMapChart.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  IAccessibilityProps,\n  CartesianChart,\n  IChildProps,\n  IModifiedCartesianChartProps,\n  IHeatMapChartData,\n  IHeatMapChartDataPoint,\n} from '../../index';\nimport { scaleLinear as d3ScaleLinear } from 'd3-scale';\nimport { classNamesFunction, memoizeFunction } from '@fluentui/react/lib/Utilities';\nimport { FocusZoneDirection } from '@fluentui/react-focus';\nimport { DirectionalHint } from '@fluentui/react/lib/Callout';\nimport { IProcessedStyleSet } from '@fluentui/react/lib/Styling';\nimport * as React from 'react';\nimport { IHeatMapChartProps, IHeatMapChartStyleProps, IHeatMapChartStyles } from './HeatMapChart.types';\nimport { ILegend, Legends } from '../Legends/index';\nimport {\n  ChartTypes,\n  convertToLocaleString,\n  getAccessibleDataObject,\n  XAxisTypes,\n  YAxisType,\n  getTypeOfAxis,\n} from '../../utilities/utilities';\nimport { Target } from '@fluentui/react';\nimport { format as d3Format } from 'd3-format';\nimport * as d3TimeFormat from 'd3-time-format';\n\ntype DataSet = {\n  dataSet: RectanglesGraphData;\n  yAxisPoints: string[];\n  xAxisPoints: string[];\n};\ntype FlattenData = IHeatMapChartDataPoint & {\n  legend: string;\n};\ninterface IRectRef {\n  data: FlattenData;\n  refElement: SVGGElement;\n}\ntype RectanglesGraphData = { [key: string]: FlattenData[] };\nexport interface IHeatMapChartState {\n  /**\n   * contains the selected legend string\n   */\n  selectedLegend: string;\n  /**\n   * contains the hovered legend string\n   */\n  activeLegend: string;\n  /**\n   * determines wethere to show or hide the callout\n   * @default false\n   */\n  isCalloutVisible: boolean;\n  /**\n   * y value to be shown in callout\n   */\n  calloutYValue: string;\n  /**\n   * legend title to be shown in callout\n   */\n  calloutLegend: string;\n  /**\n   * color of the text in the callout\n   */\n  calloutTextColor: string;\n  /**\n   * The target that the Callout should try to position itself based on\n   */\n  target: Target;\n  /**\n   * ratio to show in the callout\n   */\n  ratio: [number, number] | null;\n\n  /**\n   * description message to show in the callout\n   */\n  descriptionMessage: string;\n  /**\n   * id to give to callout for accesiblity purpose\n   */\n  calloutId: string;\n  /**\n   * Accessibility data for callout\n   */\n  callOutAccessibilityData?: IAccessibilityProps;\n}\nconst getClassNames = classNamesFunction<IHeatMapChartStyleProps, IHeatMapChartStyles>();\nexport class HeatMapChartBase extends React.Component<IHeatMapChartProps, IHeatMapChartState> {\n  private _classNames: IProcessedStyleSet<IHeatMapChartStyles>;\n  private _stringXAxisDataPoints: string[];\n  private _stringYAxisDataPoints: string[];\n  private _createSet: (\n    data: IHeatMapChartData[],\n    xDate: string | undefined,\n    xNum: string | undefined,\n    yDate: string | undefined,\n    yNum: string | undefined,\n  ) => DataSet;\n  private _dataSet: RectanglesGraphData;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _colorScale: any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _xAxisScale: any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _yAxisScale: any;\n  /**\n   * This array contains ref for all the rectangles\n   * drawn inside the chard\n   */\n  private _rectRefArray: { [key: string]: IRectRef } = {};\n  private _xAxisType: XAxisTypes;\n  private _yAxisType: YAxisType;\n  private _calloutAnchorPoint: FlattenData | null;\n  public constructor(props: IHeatMapChartProps) {\n    super(props);\n    const { x, y } = this._getXandY();\n    this._xAxisType = getTypeOfAxis(x, true) as XAxisTypes;\n    this._yAxisType = getTypeOfAxis(y, false) as YAxisType;\n    /**\n     * below funciton creates a new data set from the prop\n     * @data and also finds all the unique x-axis datapoints\n     * and y-axis datapoints(which will render in the axis in graph)\n     * we store this in a memoized function, because we want to calulate\n     * this set whenever props changes.\n     */\n    this._createSet = memoizeFunction(\n      (\n        data: IHeatMapChartData[],\n        xDate: string | undefined,\n        xNum: string | undefined,\n        yDate: string | undefined,\n        yNum: string | undefined,\n      ): DataSet => this._createNewDataSet(data, xDate, xNum, yDate, yNum),\n    );\n    this.state = {\n      selectedLegend: '',\n      activeLegend: '',\n      isCalloutVisible: false,\n      target: null,\n      calloutLegend: '',\n      calloutTextColor: '',\n      calloutYValue: '',\n      ratio: null,\n      descriptionMessage: '',\n      calloutId: '',\n    };\n  }\n  public render(): React.ReactNode {\n    const {\n      data,\n      xAxisDateFormatString,\n      xAxisNumberFormatString,\n      yAxisDateFormatString,\n      yAxisNumberFormatString,\n    } = this.props;\n    this._colorScale = this._getColorScale();\n    const { dataSet, xAxisPoints, yAxisPoints } = this._createSet(\n      data,\n      xAxisDateFormatString,\n      xAxisNumberFormatString,\n      yAxisDateFormatString,\n      yAxisNumberFormatString,\n    );\n    this._dataSet = dataSet;\n    this._stringYAxisDataPoints = yAxisPoints;\n    this._stringXAxisDataPoints = xAxisPoints;\n    this._classNames = getClassNames(this.props.styles!, { theme: this.props.theme! });\n    const calloutProps: IModifiedCartesianChartProps['calloutProps'] = {\n      isBeakVisible: false,\n      gapSpace: 8,\n      ...this.props.calloutProps,\n      isCalloutVisible: this.state.isCalloutVisible,\n      id: this.state.calloutId,\n      YValue: this.state.calloutYValue,\n      legend: this.state.calloutLegend,\n      color: this.state.calloutTextColor,\n      target: this.state.target,\n      styles: this._classNames.subComponentStyles.calloutStyles,\n      directionalHint: DirectionalHint.topAutoEdge,\n      onDismiss: this._closeCallout,\n      ...getAccessibleDataObject(this.state.callOutAccessibilityData, 'text', false),\n      preventDismissOnLostFocus: true,\n    };\n    const chartHoverProps: IModifiedCartesianChartProps['chartHoverProps'] = {\n      ...(this.state.ratio && {\n        ratio: this.state.ratio,\n      }),\n      descriptionMessage: this.state.descriptionMessage,\n    };\n    return (\n      <CartesianChart\n        {...this.props}\n        points={data}\n        chartType={ChartTypes.HeatMapChart}\n        xAxisType={XAxisTypes.StringAxis}\n        yAxisType={YAxisType.StringAxis}\n        calloutProps={calloutProps}\n        chartHoverProps={chartHoverProps}\n        styles={this._classNames.subComponentStyles!.cartesianStyles}\n        datasetForXAxisDomain={this._stringXAxisDataPoints}\n        stringDatasetForYAxisDomain={this._stringYAxisDataPoints}\n        xAxisTickCount={this._stringXAxisDataPoints.length}\n        xAxistickSize={0}\n        xAxisPadding={0.02}\n        yAxisPadding={0.02}\n        svgFocusZoneProps={{\n          direction: FocusZoneDirection.bidirectional,\n        }}\n        legendBars={this._createLegendBars()}\n        onChartMouseLeave={this._handleChartMouseLeave}\n        /* eslint-disable react/jsx-no-bind */\n        // eslint-disable-next-line react/no-children-prop\n        children={(props: IChildProps) => {\n          this._xAxisScale = props.xScale;\n          this._yAxisScale = props.yScale;\n          return this._createRectangles();\n        }}\n      />\n    );\n  }\n\n  private _getXandY = (): { x: string | Date | number; y: string | Date | number } => {\n    let x: string | Date | number = '';\n    let y: string | Date | number = '';\n    this.props.data.forEach((item: IHeatMapChartData) => {\n      if (item.data && item.data.length > 0) {\n        x = item.data[0].x;\n        y = item.data[0].y;\n        return { x, y };\n      }\n    });\n    return { x, y };\n  };\n\n  private _getOpacity = (legendTitle: string): string => {\n    const opacity = this._legendHighlighted(legendTitle) || this._noLegendHighlighted() ? '1' : '0.1';\n    return opacity;\n  };\n\n  private _rectRefCallback = (rectElement: SVGGElement, index: number | string, dataPointObject: FlattenData): void => {\n    this._rectRefArray[index] = { data: dataPointObject, refElement: rectElement };\n  };\n\n  private _onRectFocus = (id: string, data: FlattenData): void => {\n    this.setState({\n      target: this._rectRefArray[id].refElement,\n      /** Show the callout if highlighted rectangle is focused and Hide it if unhighlighted rectangle is focused */\n      isCalloutVisible: this.state.selectedLegend === '' || this.state.selectedLegend === data.legend,\n      calloutYValue: `${data.rectText}`,\n      calloutTextColor: this._colorScale(data.value),\n      calloutLegend: data.legend,\n      ratio: data.ratio || null,\n      descriptionMessage: data.descriptionMessage || '',\n      calloutId: id,\n      callOutAccessibilityData: data.callOutAccessibilityData,\n    });\n  };\n\n  private _onRectMouseOver = (id: string, data: FlattenData, mouseEvent: React.MouseEvent<SVGGElement>): void => {\n    mouseEvent.persist();\n    if (this._calloutAnchorPoint !== data) {\n      this._calloutAnchorPoint = data;\n      this.setState({\n        target: this._rectRefArray[id].refElement,\n        /** Show the callout if highlighted rectangle is hovered and Hide it if unhighlighted rectangle is hovered */\n        isCalloutVisible: this.state.selectedLegend === '' || this.state.selectedLegend === data.legend,\n        calloutYValue: `${data.rectText}`,\n        calloutTextColor: this._colorScale(data.value),\n        calloutLegend: data.legend,\n        ratio: data.ratio || null,\n        descriptionMessage: data.descriptionMessage || '',\n        calloutId: id,\n        callOutAccessibilityData: data.callOutAccessibilityData,\n      });\n    }\n  };\n\n  private _onRectBlurOrMouseOut = (): void => {\n    /**/\n  };\n\n  private _handleChartMouseLeave = (): void => {\n    this._calloutAnchorPoint = null;\n    this.setState({\n      isCalloutVisible: false,\n    });\n  };\n\n  /**\n   * This is the function which is responsible for\n   * drawing the rectangle in the graph and also\n   * attaching dom events to that rectangles\n   */\n  private _createRectangles = (): React.ReactNode => {\n    const rectangles: JSX.Element[] = [];\n    const yAxisDataPoints = this._stringYAxisDataPoints.slice().reverse();\n    /**\n     * yAxisDataPoint is noting but the DataPoint\n     * which will be rendered on the y-axis\n     */\n    yAxisDataPoints.forEach((yAxisDataPoint: string, index1: number) => {\n      /**\n       * dataPointObject is an object where it contains information on single\n       * data point such as x, y , value, rectText property of the rectangle\n       */\n      this._dataSet[yAxisDataPoint].forEach((dataPointObject: FlattenData, index2: number) => {\n        const id = `${index1}${index2}`;\n        const rectElement: JSX.Element = (\n          <g\n            key={id}\n            role=\"img\"\n            aria-label={this._getAriaLabel(dataPointObject)}\n            data-is-focusable={true}\n            fillOpacity={this._getOpacity(dataPointObject.legend)}\n            transform={`translate(${this._xAxisScale(dataPointObject.x)}, ${this._yAxisScale(dataPointObject.y)})`}\n            ref={(gElement: SVGGElement) => {\n              this._rectRefCallback(gElement, id, dataPointObject);\n            }}\n            onFocus={this._onRectFocus.bind(this, id, dataPointObject)}\n            onBlur={this._onRectBlurOrMouseOut}\n            onMouseOver={this._onRectMouseOver.bind(this, id, dataPointObject)}\n            onMouseOut={this._onRectBlurOrMouseOut}\n          >\n            <rect\n              fill={this._colorScale(dataPointObject.value)}\n              width={this._xAxisScale.bandwidth()}\n              height={this._yAxisScale.bandwidth()}\n              onClick={dataPointObject.onClick}\n            />\n            <text\n              dominantBaseline={'middle'}\n              textAnchor={'middle'}\n              className={this._classNames.text}\n              transform={`translate(${this._xAxisScale.bandwidth() / 2}, ${this._yAxisScale.bandwidth() / 2})`}\n            >\n              {convertToLocaleString(dataPointObject.rectText, this.props.culture)}\n            </text>\n          </g>\n        );\n        rectangles.push(rectElement);\n      });\n    });\n    return rectangles;\n  };\n  /**\n   * when the legend is hovered we need to highlight\n   * all the rectangles which fall under that category\n   * and un-highlight the rest of them\n   * @param legendTitle\n   */\n  private _onLegendHover = (legendTitle: string): void => {\n    this.setState({\n      activeLegend: legendTitle,\n    });\n  };\n\n  /**\n   * when the mouse is out from the legend , we need\n   * to show the graph in initial mode.\n   */\n  private _onLegendLeave = (): void => {\n    this.setState({\n      activeLegend: '',\n    });\n  };\n  /**\n   * @param legendTitle\n   * when the legend is clicked we need to highlight\n   * all the rectangles which fall under that category\n   * and un highlight the rest of them\n   */\n  private _onLegendClick = (legendTitle: string): void => {\n    /**\n     * check if the legend is already selceted,\n     * if yes, un-select the legend, else\n     * set the selected legend state to legendTitle\n     */\n    if (this.state.selectedLegend === legendTitle) {\n      this.setState({\n        selectedLegend: '',\n      });\n    } else {\n      this.setState({\n        selectedLegend: legendTitle,\n      });\n    }\n  };\n  private _createLegendBars = (): JSX.Element => {\n    const { data, legendProps } = this.props;\n    const legends: ILegend[] = [];\n    data.forEach((item: IHeatMapChartData) => {\n      const legend: ILegend = {\n        title: item.legend,\n        color: this._colorScale(item.value),\n        action: () => {\n          this._onLegendClick(item.legend);\n        },\n        hoverAction: () => {\n          this._handleChartMouseLeave();\n          this._onLegendHover(item.legend);\n        },\n        onMouseOutAction: () => {\n          this._onLegendLeave();\n        },\n      };\n      legends.push(legend);\n    });\n    return <Legends {...legendProps} legends={legends} />;\n  };\n\n  private _getColorScale = () => {\n    const { domainValuesForColorScale, rangeValuesForColorScale } = this.props;\n    return d3ScaleLinear()\n      .domain(domainValuesForColorScale)\n      .range((rangeValuesForColorScale as unknown) as number[]);\n  };\n\n  private _getXIndex = (value: string | Date | number): string => {\n    if (this._xAxisType === XAxisTypes.DateAxis) {\n      return `${(value as Date).getTime()}`;\n    } else if (this._xAxisType === XAxisTypes.StringAxis) {\n      return value as string;\n    } else if (this._xAxisType === XAxisTypes.NumericAxis) {\n      return `${value}`;\n    } else {\n      return '';\n    }\n  };\n  private _getYIndex = (value: string | Date | number): string => {\n    if (this._yAxisType === YAxisType.DateAxis) {\n      return `${(value as Date).getTime()}`;\n    } else if (this._yAxisType === YAxisType.StringAxis) {\n      return value as string;\n    } else if (this._yAxisType === YAxisType.NumericAxis) {\n      return `${value}`;\n    } else {\n      return '';\n    }\n  };\n\n  /**\n   * This will create a new data set based on the prop\n   * @data\n   * We will be using This data set to contsruct our rectangles\n   * in the chart, we use this data set becuase, when we loop in this\n   * data and build the heat map, it will support accessibility as\n   * specified in the figma\n   */\n\n  private _createNewDataSet = (\n    data: IHeatMapChartData[],\n    xAxisDateFormatString: string | undefined,\n    xAxisNumberFormatString: string | undefined,\n    yAxisDateFormatString: string | undefined,\n    yAxisNumberFormatString: string | undefined,\n  ): DataSet => {\n    /**\n     * please do not destructure any of the props here,\n     * instead send them as parameter to this functions so that\n     * this functions get called whenever the prop changes\n     */\n    const flattenData: FlattenData[] = [];\n    /**\n     * below for each loop will store all the datapoints in the one array.\n     * basically it will flatten the nestesd array (data prop) into single array\n     * of object. where each object contains x, y, rectText , value and legend propety of single\n     * data point.\n     */\n    data.forEach((item: IHeatMapChartData) => {\n      item.data.forEach((point: IHeatMapChartDataPoint) => {\n        flattenData.push({ ...point, legend: item.legend });\n      });\n    });\n    const yPoints: RectanglesGraphData = {};\n    const uniqueYPoints: { [key: string]: '1' } = {};\n    const uniqueXPoints: { [key: string]: '1' } = {};\n    flattenData.forEach((item: FlattenData) => {\n      const posX = this._getXIndex(item.x);\n      const posY = this._getYIndex(item.y);\n\n      uniqueXPoints[posX] = '1';\n      uniqueYPoints[posY] = '1';\n      /** we will check if the property(posY) is already there in object, if  Yes,\n       *  then we will append the item in the Array related to the pos, if not\n       *  then we will simply append the item in the new Array and\n       *  assign that array to the  property (posY) in the Object\n       *  and finally we will get the array of Objects associated to each\n       *  property (which is nothing but y data point) and object in the\n       *  array are noting but x data points associated to the property y\n       */\n      if (yPoints[posY]) {\n        yPoints[posY] = [...yPoints[posY], item];\n      } else {\n        yPoints[posY] = [item];\n      }\n    });\n    /**\n     * we will now sort(ascending) the array's of y data point based on the x value\n     * sorting is important to achive the accessibility order of the\n     * rectangles and then format the x and y datapoints respectively\n     */\n    Object.keys(yPoints).forEach((item: string) => {\n      yPoints[item]\n        .sort((a: IHeatMapChartDataPoint, b: IHeatMapChartDataPoint) => {\n          if (this._xAxisType === XAxisTypes.StringAxis) {\n            return (a.x as string).toLowerCase() > (b.x as string).toLowerCase() ? 1 : -1;\n          } else if (this._xAxisType === XAxisTypes.DateAxis) {\n            return (a.x as Date).getTime() - (b.x as Date).getTime();\n          } else if (this._xAxisType === XAxisTypes.NumericAxis) {\n            return +(a.x as string) > +(b.x as string) ? 1 : -1;\n          } else {\n            return a.x > b.x ? 1 : -1;\n          }\n        })\n        .forEach((datapoint: IHeatMapChartDataPoint) => {\n          if (this._xAxisType === XAxisTypes.DateAxis) {\n            datapoint.x = this._getStringFormattedDate(datapoint.x as string, xAxisDateFormatString);\n          }\n          if (this._xAxisType === XAxisTypes.NumericAxis) {\n            datapoint.x = this._getStringFormattedNumber(datapoint.x as string, xAxisNumberFormatString);\n          }\n          if (this._xAxisType === XAxisTypes.StringAxis) {\n            datapoint.x = this._getFormattedLabelForXAxisDataPoint(datapoint.x as string);\n          }\n          if (this._yAxisType === YAxisType.DateAxis) {\n            datapoint.y = this._getStringFormattedDate(datapoint.y as string, yAxisDateFormatString);\n          }\n          if (this._yAxisType === YAxisType.NumericAxis) {\n            datapoint.y = this._getStringFormattedNumber(datapoint.y as string, yAxisNumberFormatString);\n          }\n          if (this._yAxisType === YAxisType.StringAxis) {\n            datapoint.y = this._getFormattedLabelForYAxisDataPoint(datapoint.y as string);\n          }\n        });\n    });\n    /**\n     * if  y-axis data points are of type date or number or if we have string formatter,\n     * then we need to change data points  to their respective string\n     * format, becuase in the private variable this._stringYAxisDatapoints, points will be stored in\n     * string format. and in here `yPoint` are not so we need to change, so that\n     * function `this._createRectangles` should work perfetcly while looping, and  if we don't change\n     * then `this._createRectangles` will fail while looping, causing the error\n     * Cannot read property 'forEach' of undefined\n     */\n\n    Object.keys(yPoints).forEach((yPoint: string) => {\n      if (this._yAxisType === YAxisType.DateAxis) {\n        yPoints[this._getStringFormattedDate(yPoint, yAxisDateFormatString)] = yPoints[yPoint];\n      } else if (this._yAxisType === YAxisType.NumericAxis) {\n        yPoints[`${this._getStringFormattedNumber(yPoint, yAxisNumberFormatString)}`] = yPoints[yPoint];\n      } else {\n        yPoints[this._getFormattedLabelForYAxisDataPoint(yPoint)] = yPoints[yPoint];\n      }\n    });\n    /**\n     * assigning new data set\n     */\n    const dataSet = yPoints;\n    /**\n     * These are the Y axis data points which will get rendered in the\n     * Y axis in graph\n     */\n    const yAxisPoints = this._getYAxisDataPoints(uniqueYPoints);\n    /**\n     * These are the x axis data points which will get rendered in the\n     * x axis in the graph\n     */\n\n    const xAxisPoints = this._getXAxisDataPoints(uniqueXPoints);\n    return {\n      dataSet,\n      yAxisPoints,\n      xAxisPoints,\n    };\n  };\n\n  /**\n   * This function will return the final sorted and formatted x-axis points\n   * which will be rendered on the x-axis\n   * @param points\n   * @returns x-axis points\n   */\n  private _getXAxisDataPoints = (points: { [key: string]: '1' }): string[] => {\n    let xAxisPoints: string[] = [];\n    const unFormattedXAxisDataPoints = Object.keys(points).sort((a: string, b: string) => {\n      if (this._xAxisType === XAxisTypes.DateAxis || this._xAxisType === XAxisTypes.NumericAxis) {\n        return +a - +b;\n      } else {\n        return a.toLowerCase() > b.toLowerCase() ? 1 : -1;\n      }\n    });\n    xAxisPoints = unFormattedXAxisDataPoints.map((xPoint: string) => {\n      if (this._xAxisType === XAxisTypes.DateAxis) {\n        return this._getStringFormattedDate(xPoint, this.props.xAxisDateFormatString);\n      } else if (this._xAxisType === XAxisTypes.NumericAxis) {\n        return this._getStringFormattedNumber(xPoint, this.props.xAxisNumberFormatString);\n      } else {\n        return this._getFormattedLabelForXAxisDataPoint(xPoint);\n      }\n    });\n\n    return xAxisPoints;\n  };\n  /**\n   * This function will return the final sorted and formatted y-axis points\n   * which will be rendered on the y-axis\n   * @param points\n   * @returns yaxis points\n   */\n  private _getYAxisDataPoints = (points: { [key: string]: '1' }): string[] => {\n    let yAxisPoints: string[] = [];\n    const unFormattedYAxisDataPoints = Object.keys(points).sort((a: string, b: string) => {\n      if (this._yAxisType === YAxisType.DateAxis || this._yAxisType === YAxisType.NumericAxis) {\n        return +a - +b;\n      } else {\n        return a.toLowerCase() > b.toLowerCase() ? 1 : -1;\n      }\n    });\n    yAxisPoints = unFormattedYAxisDataPoints.map((yPoint: string) => {\n      if (this._yAxisType === YAxisType.DateAxis) {\n        return this._getStringFormattedDate(yPoint, this.props.yAxisDateFormatString);\n      } else if (this._yAxisType === YAxisType.NumericAxis) {\n        return this._getStringFormattedNumber(yPoint, this.props.yAxisNumberFormatString);\n      } else {\n        return this._getFormattedLabelForYAxisDataPoint(yPoint);\n      }\n    });\n\n    return yAxisPoints;\n  };\n\n  private _getStringFormattedDate = (point: string, formatString?: string): string => {\n    const date = new Date();\n    date.setTime(+point);\n    return d3TimeFormat.timeFormat(formatString || '%b/%d')(date);\n  };\n\n  private _getStringFormattedNumber = (point: string, formatString?: string): string => {\n    return d3Format(formatString || '.2~s')(+point);\n  };\n\n  private _getFormattedLabelForXAxisDataPoint = (point: string): string => {\n    const { xAxisStringFormatter } = this.props;\n    return xAxisStringFormatter ? xAxisStringFormatter(point) : point;\n  };\n\n  private _getFormattedLabelForYAxisDataPoint = (point: string): string => {\n    const { yAxisStringFormatter } = this.props;\n    return yAxisStringFormatter ? yAxisStringFormatter(point) : point;\n  };\n\n  private _closeCallout = () => {\n    this.setState({\n      isCalloutVisible: false,\n    });\n  };\n\n  /**\n   * This function checks if the given legend is highlighted or not.\n   * A legend can be highlighted in 2 ways:\n   * 1. selection: if the user clicks on it\n   * 2. hovering: if there is no selected legend and the user hovers over it\n   */\n  private _legendHighlighted = (legendTitle: string) => {\n    return (\n      this.state.selectedLegend === legendTitle ||\n      (this.state.selectedLegend === '' && this.state.activeLegend === legendTitle)\n    );\n  };\n\n  /**\n   * This function checks if none of the legends is selected or hovered.\n   */\n  private _noLegendHighlighted = () => {\n    return this.state.selectedLegend === '' && this.state.activeLegend === '';\n  };\n\n  private _getAriaLabel = (point: FlattenData): string => {\n    const xValue = point.x;\n    const yValue = point.y;\n    const legend = point.legend;\n    const zValue = point.ratio ? `${point.ratio[0]}/${point.ratio[1]}` : point.rectText || point.value;\n    const description = point.descriptionMessage;\n    return (\n      point.callOutAccessibilityData?.ariaLabel ||\n      `${xValue}, ${yValue}. ${legend}, ${zValue}.` + (description ? ` ${description}.` : '')\n    );\n  };\n}\n"]}