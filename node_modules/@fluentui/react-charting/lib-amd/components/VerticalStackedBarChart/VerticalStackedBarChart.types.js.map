{"version":3,"file":"VerticalStackedBarChart.types.js","sourceRoot":"../src/","sources":["components/VerticalStackedBarChart/VerticalStackedBarChart.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IStyle } from '@fluentui/react/lib/Styling';\nimport { ICalloutProps } from '@fluentui/react/lib/Callout';\nimport { IRenderFunction, IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';\nimport {\n  ICartesianChartProps,\n  ICartesianChartStyleProps,\n  ICartesianChartStyles,\n  ILineChartLineOptions,\n  IVerticalStackedChartProps,\n  IVSChartDataPoint,\n} from '../../index';\n\nexport interface IVerticalStackedBarChartProps extends ICartesianChartProps {\n  /**\n   * Data to render in the chart.\n   */\n  data: IVerticalStackedChartProps[];\n\n  /**\n   * Width of each bar in the chart.\n   */\n  barWidth?: number;\n\n  /**\n   * Gap (max) between bars in a stack. When non-zero, the bars in a stack will\n   * be separated by gaps. The actual size of each gap is calculated as 20% of\n   * the height of that stack, with a minimum size of 1px and a maximum given by\n   * this prop.\n   * @default 0\n   */\n  barGapMax?: number;\n\n  /**\n   * Corner radius of the bars\n   * @default 0\n   */\n  barCornerRadius?: number;\n\n  /**\n   * The minimum height of a bar; bars below this height will be displayed at\n   * this height. Note that this setting will result in the height of these data\n   * points not being to scale.\n   * @default 0\n   */\n  barMinimumHeight?: number;\n\n  /**\n   * Colors from which to select the color of each bar.\n   * @deprecated Not using this prop. DIrectly taking color from given data.\n   */\n  colors?: string[];\n\n  /**\n   * chart title for the chart\n   */\n  chartTitle?: string;\n\n  /**\n   * To display multi stack callout or single callout\n   * @default flase\n   */\n  isCalloutForStack?: boolean;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IVerticalStackedBarChartStyleProps, IVerticalStackedBarChartStyles>;\n\n  /**\n   * Define a custom callout renderer for a stack; default is to render per data point\n   */\n  onRenderCalloutPerStack?: IRenderFunction<IVerticalStackedChartProps>;\n\n  /**\n   * Define a custom callout renderer for a data point\n   */\n  onRenderCalloutPerDataPoint?: IRenderFunction<IVSChartDataPoint>;\n\n  /**\n   * props for the callout in the chart\n   */\n  calloutProps?: Partial<ICalloutProps>;\n\n  /**\n   * yMinValue is not supported for bar charts, so only allow \"undefined\"\n   */\n  yMinValue?: undefined;\n\n  /**\n   * Allow hover actions on the legend\n   * @default true\n   */\n  allowHoverOnLegend?: boolean;\n\n  /**\n   * Click handler for bars; type of data is dependant on isCalloutForStack\n   */\n  onBarClick?: (event: React.MouseEvent<SVGElement>, data: IVerticalStackedChartProps | IVSChartDataPoint) => void;\n\n  /**\n   * The prop used to define the culture to localized the numbers\n   */\n  culture?: string;\n\n  /**\n   * it's padding between bar's or lines in the graph\n   */\n  xAxisPadding?: number;\n\n  /**\n   * options for the line drawn\n   */\n  lineOptions?: ILineChartLineOptions;\n}\n\nexport interface IVerticalStackedBarChartStyleProps extends ICartesianChartStyleProps {}\n\nexport interface IVerticalStackedBarChartStyles extends ICartesianChartStyles {\n  /**\n   * Style to change the opacity of bars in dataviz when we hover on a single bar or legends\n   */\n  opacityChangeOnHover?: IStyle;\n\n  /**\n   * Style for the chart.\n   * @deprecated use root instead.\n   */\n  chart?: IStyle;\n\n  /**\n   * Style for the line representing the domain of the x-axis.\n   * @deprecated - use xAxis instead.\n   */\n  xAxisDomain?: IStyle;\n\n  /**\n   * Style for the lines representing the ticks along the x-axis.\n   * @deprecated - use xAxis instead.\n   */\n  xAxisTicks?: IStyle;\n\n  /**\n   * Style for the text labeling each tick along the x-axis.\n   * @deprecated - use xAxis instead.\n   */\n  xAxisText?: IStyle;\n\n  /**\n   * Style for the line representing the domain of the y-axis.\n   * @deprecated - use xAxis instead.\n   */\n  yAxisDomain?: IStyle;\n\n  /**\n   * Style for the lines representing the ticks along the y-axis.\n   * @deprecated - use xAxis instead.\n   */\n  yAxisTicks?: IStyle;\n\n  /**\n   * Style for the text labeling each tick along the y-axis.\n   * @deprecated - use xAxis instead.\n   */\n  yAxisText?: IStyle;\n}\n"]}