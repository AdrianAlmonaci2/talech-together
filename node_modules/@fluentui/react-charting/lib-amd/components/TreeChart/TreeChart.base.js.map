{"version":3,"file":"TreeChart.base.js","sourceRoot":"../src/","sources":["components/TreeChart/TreeChart.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { hierarchy, tree } from 'd3-hierarchy';\nimport { classNamesFunction } from '@fluentui/react/lib/Utilities';\nimport { IProcessedStyleSet } from '@fluentui/react/lib/Styling';\nimport { select, selectAll } from 'd3-selection';\nimport { FocusZone } from '@fluentui/react-focus';\nimport { max as d3Max, min as d3Min } from 'd3-array';\n\nimport {\n  ITreeProps,\n  ITreeState,\n  ITreeDataStructure,\n  ITreeChartDataPoint,\n  ITreeStyleProps,\n  ITreeStyles,\n} from '../../index';\n\nconst getClassNames = classNamesFunction<ITreeStyleProps, ITreeStyles>();\n\n// Create a parent class for common tree components\nclass StandardTree {\n  public treeData: ITreeChartDataPoint;\n  public styleClassNames: IProcessedStyleSet<ITreeStyles>;\n\n  private _nodeElements: JSX.Element[] = [];\n  private _linkElements: JSX.Element[] = [];\n\n  constructor(\n    treeData: ITreeChartDataPoint,\n    styleClassNames: IProcessedStyleSet<ITreeStyles>,\n    _nodeElements: JSX.Element[] = [],\n    _linkElements: JSX.Element[] = [],\n  ) {\n    this.treeData = treeData;\n    this.styleClassNames = styleClassNames;\n    this._nodeElements = _nodeElements;\n    this._linkElements = _linkElements;\n  }\n\n  public truncateText(text: string, rectangleWidth: number, padding: number, styleClass: string | undefined) {\n    let truncatedText = '';\n    const words = text.split(/\\s+/).reverse();\n    let word: string = '';\n    const tspan = select('.svgTree').append('text').attr('class', 'tempText').append('tspan').text(null);\n\n    if (styleClass) {\n      tspan.attr('class', styleClass);\n    }\n\n    const line: string[] = [];\n    while ((word = words.pop()!)) {\n      line.push(word);\n      tspan.text(line.join(' ') + ' ');\n      if (tspan.node() !== null) {\n        const w = tspan.node()!.getComputedTextLength();\n        if (w > rectangleWidth - padding) {\n          line.pop();\n          line.push('...');\n          break;\n        }\n      }\n    }\n\n    truncatedText = line.join(' ') + ' ';\n    tspan.text(null);\n    selectAll('.tempText').remove();\n    return truncatedText;\n  }\n\n  // Append node elements\n  // nodeId to create unique key\n  public addNodeShapetoSVG(\n    name: string,\n    subname: string | undefined,\n    bodytext: string | undefined,\n    metricName: string | undefined,\n    xCenterCoordinate: number,\n    yCoordinate: number,\n    fillColor: string,\n    rectangleWidth: number,\n    rectangleHeight: number,\n    nodeId: number,\n    parentInfo: string,\n  ) {\n    const ariaLabel = `nodeId: ${nodeId} \\nnodeMainText: ${name}\\nsubText ${subname} ${parentInfo}`;\n    const xCoordinate = xCenterCoordinate - rectangleWidth / 2;\n    if (metricName || nodeId !== 0 || !bodytext) {\n      this._nodeElements.push(\n        <rect\n          width={rectangleWidth}\n          height={rectangleHeight}\n          x={xCoordinate}\n          y={yCoordinate}\n          tabIndex={0}\n          role={'text'}\n          data-is-focusable={true}\n          aria-label={ariaLabel}\n          className={this.styleClassNames.rectNode}\n          stroke={fillColor}\n          key={`${nodeId}${this.styleClassNames.rectNode}`}\n        />,\n      );\n    }\n\n    if (subname) {\n      subname = this.truncateText(subname, rectangleWidth, rectangleWidth / 4, this.styleClassNames.rectSubText);\n    }\n    if (bodytext) {\n      bodytext = this.truncateText(bodytext, rectangleWidth, rectangleWidth / 4, this.styleClassNames.rectBodyText);\n    }\n    if (metricName) {\n      metricName = this.truncateText(\n        metricName,\n        rectangleWidth,\n        rectangleWidth / 4,\n        this.styleClassNames.rectMetricText,\n      );\n    }\n    name = this.truncateText(name, rectangleWidth, rectangleWidth / 4, this.styleClassNames.rectText);\n\n    // Text position y = y + rectHeight/2, 2 is ratio for depth\n    // Text position x = x + rectWidth/2, 2 is ratio for length\n    // Sub-text position x = x + rectWidth/2, 2 is ratio for length\n\n    const subValue = metricName ? (\n      <tspan className={this.styleClassNames.rectMetricText} dy=\"1.4em\" x={xCoordinate + rectangleWidth / 2}>\n        {metricName}\n      </tspan>\n    ) : bodytext ? (\n      <>\n        <tspan className={this.styleClassNames.rectSubText} dy=\"1.4em\" x={xCoordinate + rectangleWidth / 2}>\n          {subname}\n        </tspan>\n        <tspan className={this.styleClassNames.rectBodyText} dy=\"1.4em\" x={xCoordinate + rectangleWidth / 2}>\n          {bodytext}\n        </tspan>\n      </>\n    ) : (\n      <tspan className={this.styleClassNames.rectSubText} dy=\"1.4em\" x={xCoordinate + rectangleWidth / 2}>\n        {subname}\n      </tspan>\n    );\n\n    if (!subname && !metricName && !bodytext) {\n      this._nodeElements.push(\n        <text\n          textAnchor=\"middle\"\n          className={this.styleClassNames.rectMetricText}\n          dy={yCoordinate + rectangleHeight / 1.6}\n          x={xCoordinate + rectangleWidth / 2}\n          key={`${nodeId}${this.styleClassNames.rectText}`}\n        >\n          {name}\n        </text>,\n      );\n    } else {\n      this._nodeElements.push(\n        <text\n          textAnchor=\"middle\"\n          className={metricName ? this.styleClassNames.rectSubText : this.styleClassNames.rectText}\n          dy={metricName ? yCoordinate + rectangleHeight / 2.5 : yCoordinate + rectangleHeight / 2}\n          x={xCoordinate + rectangleWidth / 2}\n          key={`${nodeId}${this.styleClassNames.rectText}`}\n        >\n          {name}\n          {subValue}\n        </text>,\n      );\n    }\n  }\n  // Create a rectangular path from parent to the child nodes\n  public createPathLink(\n    parentX: number,\n    parentY: number,\n    childX: number,\n    childY: number,\n    leaf: boolean,\n    rectWidth: number,\n    rectHeight: number,\n    gap: number,\n    childXMax: number,\n  ): string {\n    // gap adds ratio for parent.y to child.y\n\n    /*Below code is used to draw lines(___|) to show the parent child relation i.e a vertical line\n      emerging from the parent and\n      then a horzontal line encompassing all the its children which are\n      shown below it .so it gives a visual representation of tree branches.\n\n      So for making this path firstly we are moving to the childX which is the mid point of the node and then\n      we are subtracting the half of rectwidth to move the complete width of the rectangle and\n      we are subtracting gap from y cordinate as we are making this line at a little gap from node.\n      Then we are building that line horizonatlly till childXmax, again adding half rectwidth to complete\n      the line till end as childXmax will be midpoint.\n      Then last part is for making line vertical for that we move to the parentx position and\n      then draw the vertical till parenty + rectHeight + gap/2\n      We have seperate path for leaf node as we are using different composition like compact, long etc.*/\n\n    const path = `M${childX - rectWidth / 2},${childY - gap} H${childXMax + rectWidth / 2} M${parentX},${childY - gap}\n    V${parentY + rectHeight + gap / 2}`;\n\n    const leafpath = `M${parentX},${parentY + rectHeight + gap / 2} V${parentY + gap * 5}\n    H${parentX - rectWidth / 2} H${parentX + rectWidth / 2}`;\n\n    // based on the type of node return leafpath or path element\n    return leaf ? leafpath : path;\n  }\n\n  // Append path link element\n  public addLinktoSVG(\n    nodeId: number,\n    parentX: number,\n    parentY: number,\n    childX: number,\n    childY: number,\n    leaf: boolean,\n    rectWidth: number,\n    rectHeight: number,\n    gap: number,\n    childXMax: number = 0,\n  ) {\n    this._linkElements.push(\n      <path\n        className={this.styleClassNames.link}\n        d={this.createPathLink(parentX, parentY, childX, childY, leaf, rectWidth, rectHeight, gap, childXMax)}\n        key={`${nodeId}${this.styleClassNames.link}`}\n      />,\n    );\n  }\n}\n\n// Create child class to Add Tree component based on treeHeight\nclass LayeredTree extends StandardTree {\n  public composition: number | undefined;\n  private _treeTraversal: number | undefined;\n  constructor(\n    treeData: ITreeChartDataPoint,\n    composition: number | undefined,\n    styleClassNames: IProcessedStyleSet<ITreeStyles>,\n    _nodeElements: JSX.Element[] = [],\n    _linkElements: JSX.Element[] = [],\n    _treeTraversal: number | undefined,\n  ) {\n    super(treeData, styleClassNames, _nodeElements, _linkElements);\n    this.composition = composition;\n    this._treeTraversal = _treeTraversal;\n  }\n  public createTree(givenLayoutWidth: number | undefined, screenWidth: number) {\n    givenLayoutWidth = givenLayoutWidth! < 65 ? 65 : givenLayoutWidth! > 90 ? 90 : givenLayoutWidth;\n    const layoutWidth = givenLayoutWidth || 75;\n    const root = hierarchy(this.treeData, d => {\n      return d.children;\n    });\n\n    // Find tree Height\n    const treeHeight = root?.height + 1;\n\n    // Create tree layout, width: layoutWidth, height: layoutWidth/1.5 and add node separation\n    const treeChart = tree()\n      .nodeSize([layoutWidth, layoutWidth / 1.5])\n      .separation((a, b) => {\n        return a.parent === root && b.parent === root ? 3.5 : 1;\n      });\n\n    // Assigns the x and y position for the nodes\n    const treeData = treeChart(root);\n\n    // Compute the new tree layout.\n    const nodes = treeData.descendants();\n\n    // Normalize for fixed-depth and width\n    // Normalise y coordinate by depth of each node by a factor of 130\n    // Normalise x coordinate by start coordinate 0 with screenSize/3\n    nodes.forEach(d => {\n      d.y = d.depth === 0 ? 10 : d.depth * 130;\n      d.x += screenWidth / 2;\n    });\n\n    // <------------------ Traversal section ------------------>\n\n    // Create tree data structure\n    const treeDataStructure: Array<ITreeDataStructure> = [];\n    let TreeID: number = 0;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const createTreeDataStructure = (d: any) => {\n      d.id = TreeID;\n      treeDataStructure.push({\n        id: TreeID,\n        children: d.children,\n        dataName: d.data.name,\n        subName: d.data.subname,\n        bodyText: d.data.bodytext,\n        metricName: d.data?.metric,\n        fill: d.data.fill,\n        x: d.x,\n        y: d.y,\n        parentID: d.parent?.id,\n      });\n      TreeID++;\n    };\n\n    this._treeTraversal === 0\n      ? root.each(d => {\n          createTreeDataStructure(d);\n        })\n      : root.eachBefore(d => {\n          createTreeDataStructure(d);\n        });\n\n    const rectWidth = layoutWidth * 3;\n    const rectHeight = rectWidth / 3.45;\n    const gap: number = 20;\n    const parentSet = new Set();\n\n    for (const d of treeDataStructure) {\n      const parentInfo =\n        d.id === 0\n          ? 'Root Node'\n          : `Parent info parentId: ${d.parentID}\n      ${treeDataStructure[d.parentID].dataName}\n      ${treeDataStructure[d.parentID].subName}`;\n\n      // check for leaf nodes\n      if (!d.children && !parentSet.has(d.parentID) && treeHeight === 3) {\n        const compactNodeWidth = (rectWidth - gap) / 2;\n        const compactNodeHeight = rectHeight;\n        parentSet.add(d.parentID);\n\n        // <------------------ Links section ------------------>\n        this.addLinktoSVG(\n          d.id,\n          treeDataStructure[d.parentID].x,\n          treeDataStructure[d.parentID].y,\n          treeDataStructure[d.id].x,\n          treeDataStructure[d.id].y,\n          true,\n          rectWidth,\n          rectHeight,\n          gap,\n        );\n\n        // <------------------ Nodes section ------------------>\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const children: any = treeDataStructure[d.parentID]?.children;\n\n        const compactNodeCenterX1: number = treeDataStructure[d.parentID]?.x - compactNodeWidth / 2 - gap / 2;\n        const compactNodeCenterX2: number = treeDataStructure[d.parentID]?.x + compactNodeWidth / 2 + gap / 2;\n        const longNodeCenterX: number = treeDataStructure[d.parentID]?.x;\n        let dy: number = children[0]?.y;\n\n        for (let itr = 0; itr < children.length; ++itr) {\n          const child = children[itr];\n\n          // Given Composition\n          if (this.composition !== undefined) {\n            // For compact compostion\n            if (this.composition === 0) {\n              this.addNodeShapetoSVG(\n                child.data.name,\n                child.data.subname,\n                child.data.bodytext,\n                child.data.metricName,\n                // If the leaf node count is 1 ,\n                //irrespective of provided composition we should always use long composition\n                itr % 2 === 0 ? (children.length === 1 ? longNodeCenterX : compactNodeCenterX1) : compactNodeCenterX2,\n                dy,\n                child.data.fill,\n                children.length === 1 ? rectWidth : compactNodeWidth,\n                rectHeight,\n                child.id,\n                parentInfo,\n              );\n              if (itr % 2 === 1) {\n                dy += compactNodeHeight + gap;\n              }\n            }\n            // For long compostion\n            else {\n              this.addNodeShapetoSVG(\n                child.data.name,\n                child.data.subname,\n                child.data.bodytext,\n                child.data.metricName,\n                longNodeCenterX,\n                dy,\n                child.data.fill,\n                rectWidth,\n                rectHeight,\n                child.id,\n                parentInfo,\n              );\n              dy += compactNodeHeight + gap;\n            }\n          }\n\n          // Automatic Node Composition\n          else {\n            if (children.length > 2) {\n              this.addNodeShapetoSVG(\n                child.data.name,\n                child.data.subname,\n                child.data.bodytext,\n                child.data.metricName,\n                itr % 2 === 0 ? compactNodeCenterX1 : compactNodeCenterX2,\n                dy,\n                child.data.fill,\n                children.length === 1 ? rectWidth : compactNodeWidth,\n                rectHeight,\n                child.id,\n                parentInfo,\n              );\n              if (itr % 2 === 1) {\n                dy += compactNodeHeight + gap;\n              }\n            } else {\n              this.addNodeShapetoSVG(\n                child.data.name,\n                child.data.subname,\n                child.data.bodytext,\n                child.data.metricName,\n                longNodeCenterX,\n                dy,\n                child.data.fill,\n                rectWidth,\n                rectHeight,\n                child.id,\n                parentInfo,\n              );\n              dy += compactNodeHeight + gap;\n            }\n          }\n        }\n      }\n\n      if (d.children || treeHeight <= 2) {\n        // <------------------ Nodes section ------------------>\n        // Since the height <=2 we will be using long compositon.\n        this.addNodeShapetoSVG(\n          d.dataName,\n          d.subName,\n          d.bodyText,\n          d.metricName,\n          d.x,\n          d.y,\n          d.fill,\n          rectWidth,\n          rectHeight,\n          d.id,\n          parentInfo,\n        );\n\n        // <------------------ Links section ------------------>\n        if (d.id === 0 && d.children) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const children: any = treeDataStructure[d.id]?.children;\n          const childXMin = d3Min(children, (child: ITreeDataStructure) => child.x as number)!;\n          const childXMax = d3Max(children, (child: ITreeDataStructure) => child.x as number)!;\n          this.addLinktoSVG(d.id, d.x, d.y, childXMin, d.children[0].y, false, rectWidth, rectHeight, gap, childXMax);\n        }\n      }\n    }\n  }\n}\n\nexport class TreeChartBase extends React.Component<ITreeProps, ITreeState> {\n  private _treeData: ITreeChartDataPoint;\n  private _width: number;\n  private _height: number;\n  private _composition: number | undefined;\n  private _classNames: IProcessedStyleSet<ITreeStyles>;\n  private _margin: { left: number; right: number; top: number; bottom: number };\n  private _nodeElements: JSX.Element[] = [];\n  private _linkElements: JSX.Element[] = [];\n  private _treeTraversal: number | undefined;\n\n  constructor(props: ITreeProps) {\n    super(props);\n    this._margin = { top: 30, right: 20, bottom: 30, left: 50 };\n    this._width = this.props.width || 1500;\n    this._height = this.props.height || 700;\n    this._treeData = this.props.treeData;\n    this._composition = this.props?.composition;\n    this._treeTraversal = this.props.treeTraversal;\n\n    this.state = {\n      _width: this._width,\n      _height: this._height,\n    };\n  }\n\n  public componentDidMount() {\n    const { theme, className, styles } = this.props;\n\n    // Get classNames to create component styling\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    // Call createTreeChart function in componentDidMount\n    this.createTreeChart();\n\n    this.setState({\n      _width: this.props.width || 1500,\n      _height: this.props.height || 700,\n    });\n  }\n\n  public componentDidUpdate(prevProps: ITreeProps): void {\n    if (prevProps.layoutWidth !== this.props.layoutWidth) {\n      const svgText = selectAll('text');\n      const svgRect = selectAll('rect');\n      const svgLink = selectAll('path');\n\n      if (this._nodeElements.length === 0 && this._linkElements.length === 0) {\n        svgText.remove();\n        svgRect.remove();\n        svgLink.remove();\n      }\n\n      this.createTreeChart();\n    }\n  }\n  public createTreeChart() {\n    const nodeElements: JSX.Element[] = [];\n    const linkElements: JSX.Element[] = [];\n\n    // Instantiate inherited class and call createTree function for the object\n    const treeObject = new LayeredTree(\n      this._treeData,\n      this._composition,\n      this._classNames,\n      nodeElements,\n      linkElements,\n      this._treeTraversal,\n    );\n    const width = this.state._width - this._margin.left - this._margin.right;\n    treeObject.createTree(this.props.layoutWidth, width);\n    this._nodeElements = nodeElements;\n    this._linkElements = linkElements;\n  }\n\n  public render(): JSX.Element {\n    return (\n      <FocusZone>\n        <div className={this._classNames?.root}>\n          <svg\n            className=\"svgTree\"\n            width={this.state._width - this._margin.left - this._margin.right}\n            height={this.state._height - this._margin.top - this._margin.bottom}\n          >\n            <g className=\"svgNode\">{this._nodeElements.map(element => element)}</g>\n            <g className=\"svgLink\">{this._linkElements.map(element => element)}</g>\n          </svg>\n        </div>\n      </FocusZone>\n    );\n  }\n}\n"]}