define(["require", "exports", "react", "@fluentui/react", "./Textbox"], function (require, exports, React, react_1, Textbox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LabelLink = void 0;
    var LabelLink = function (props) {
        var gRef = React.useRef(null);
        var _a = React.useState(false), showCard = _a[0], setShowCard = _a[1];
        var onDismiss = function () { return setShowCard(false); };
        var onClick = function () { return setShowCard(true); };
        var onRenderCell = function (i) { return React.createElement("div", { "data-is-focusable": true }, i && i()); };
        var callout = null;
        if (showCard) {
            var cards = props.labelDef.aggregatedIdx.map(function (i) { return props.lineDefs[i].onRenderCard; }).filter(function (c) { return !!c; });
            if (cards.length > 0) {
                callout = (React.createElement(react_1.Callout, { target: gRef.current, 
                    // eslint-disable-next-line react/jsx-no-bind
                    onDismiss: onDismiss, setInitialFocus: true, role: "dialog" },
                    React.createElement(react_1.FocusZone, { isCircularNavigation: true, direction: react_1.FocusZoneDirection.vertical },
                        React.createElement(react_1.List, { items: cards, 
                            // eslint-disable-next-line react/jsx-no-bind
                            onRenderCell: onRenderCell }))));
            }
        }
        var text;
        var darkThemeMq = window.matchMedia('(prefers-color-scheme: dark)');
        var fill = darkThemeMq.matches ? 'rgb(255,255,255)' : props.textColor;
        if (props.labelDef.aggregatedIdx.length === 1) {
            text = props.lineDefs[props.labelDef.aggregatedIdx[0]].event;
        }
        else {
            text = props.mergedLabel(props.labelDef.aggregatedIdx.length);
        }
        return (React.createElement(React.Fragment, null,
            React.createElement("g", { ref: gRef, onClick: onClick, "data-is-focusable": false, style: { cursor: 'pointer' } },
                React.createElement(Textbox_1.Textbox, { text: text, x: props.labelDef.x, y: props.textY, width: props.textWidth, lineHeight: props.textLineHeight, textAnchor: props.labelDef.anchor, fontSize: props.textFontSize, fill: fill })),
            callout));
    };
    exports.LabelLink = LabelLink;
});
//# sourceMappingURL=LabelLink.js.map