import { __extends } from "tslib";
import * as React from 'react';
import { classNamesFunction, getId } from '@fluentui/react/lib/Utilities';
import * as d3Sankey from 'd3-sankey';
var getClassNames = classNamesFunction();
var SankeyChartBase = /** @class */ (function (_super) {
    __extends(SankeyChartBase, _super);
    function SankeyChartBase(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            containerHeight: 0,
            containerWidth: 0,
        };
        return _this;
    }
    SankeyChartBase.prototype.componentDidMount = function () {
        this._fitParentContainer();
    };
    SankeyChartBase.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.shouldResize !== this.props.shouldResize) {
            this._fitParentContainer();
        }
    };
    SankeyChartBase.prototype.componentWillUnmount = function () {
        cancelAnimationFrame(this._reqID);
    };
    SankeyChartBase.prototype.render = function () {
        var _this = this;
        var _a = this.props, theme = _a.theme, className = _a.className, styles = _a.styles, pathColor = _a.pathColor;
        this._classNames = getClassNames(styles, {
            theme: theme,
            width: this.state.containerWidth,
            height: this.state.containerHeight,
            pathColor: pathColor,
            className: className,
        });
        var margin = { top: 10, right: 0, bottom: 10, left: 0 };
        var width = this.state.containerWidth - margin.left - margin.right;
        var height = this.state.containerHeight - margin.top - margin.bottom > 0
            ? this.state.containerHeight - margin.top - margin.bottom
            : 0;
        var sankey = d3Sankey
            .sankey()
            .nodeWidth(5)
            .nodePadding(6)
            .extent([
            [1, 1],
            [width - 1, height - 6],
        ]);
        sankey(this.props.data.SankeyChartData);
        var nodeData = this._createNodes(width);
        var linkData = this._createLinks();
        return (React.createElement("div", { className: this._classNames.root, role: 'presentation', ref: function (rootElem) { return (_this.chartContainer = rootElem); } },
            React.createElement("svg", { width: width, height: height, id: getId('sankeyChart') },
                React.createElement("g", { className: this._classNames.nodes }, nodeData),
                React.createElement("g", { className: this._classNames.links, strokeOpacity: 0.2 }, linkData))));
    };
    SankeyChartBase.prototype._createLinks = function () {
        var links = [];
        if (this.props.data.SankeyChartData) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.props.data.SankeyChartData.links.forEach(function (singleLink, index) {
                var path = d3Sankey.sankeyLinkHorizontal();
                var pathValue = path(singleLink);
                var link = (React.createElement("path", { key: index, d: pathValue ? pathValue : undefined, strokeWidth: Math.max(1, singleLink.width), id: getId('link') },
                    React.createElement("title", null,
                        React.createElement("text", null, singleLink.source.name + ' â†’ ' + singleLink.target.name + '\n' + singleLink.value))));
                links.push(link);
            });
        }
        return links;
    };
    SankeyChartBase.prototype._createNodes = function (width) {
        var nodes = [];
        if (this.props.data.SankeyChartData) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.props.data.SankeyChartData.nodes.forEach(function (singleNode, index) {
                var height = singleNode.y1 - singleNode.y0 > 0 ? singleNode.y1 - singleNode.y0 : 0;
                var node = (React.createElement("g", { id: getId('nodeGElement'), key: index },
                    React.createElement("rect", { x: singleNode.x0, y: singleNode.y0, height: height, width: singleNode.x1 - singleNode.x0, fill: singleNode.color, id: getId('nodeBar') }),
                    React.createElement("text", { x: singleNode.x0 < width / 2 ? singleNode.x1 + 6 : singleNode.x0 - 6, y: (singleNode.y1 + singleNode.y0) / 2, dy: '0.35em', textAnchor: singleNode.x0 < width / 2 ? 'start' : 'end' }, singleNode.name),
                    React.createElement("title", null,
                        React.createElement("text", null, singleNode.name + '\n' + singleNode.value))));
                nodes.push(node);
            });
            return nodes;
        }
    };
    SankeyChartBase.prototype._fitParentContainer = function () {
        var _this = this;
        var _a = this.state, containerWidth = _a.containerWidth, containerHeight = _a.containerHeight;
        this._reqID = requestAnimationFrame(function () {
            var container = _this.props.parentRef ? _this.props.parentRef : _this.chartContainer;
            var currentContainerWidth = container.getBoundingClientRect().width;
            var currentContainerHeight = container.getBoundingClientRect().height;
            var shouldResize = containerWidth !== currentContainerWidth || containerHeight !== currentContainerHeight;
            if (shouldResize) {
                _this.setState({
                    containerWidth: currentContainerWidth,
                    containerHeight: currentContainerHeight,
                });
            }
        });
    };
    return SankeyChartBase;
}(React.Component));
export { SankeyChartBase };
//# sourceMappingURL=SankeyChart.base.js.map