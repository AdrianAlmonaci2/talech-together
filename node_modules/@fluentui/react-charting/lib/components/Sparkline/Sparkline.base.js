import { __extends } from "tslib";
import * as React from 'react';
import { scaleLinear as d3ScaleLinear } from 'd3-scale';
import { area as d3Area, line as d3Line, curveLinear as d3curveLinear } from 'd3-shape';
import { max as d3Max, extent as d3Extent } from 'd3-array';
import { FocusZone, FocusZoneDirection } from '@fluentui/react-focus';
import { classNamesFunction } from '@fluentui/react/lib/Utilities';
var getClassNames = classNamesFunction();
var SparklineBase = /** @class */ (function (_super) {
    __extends(SparklineBase, _super);
    function SparklineBase(props) {
        var _this = _super.call(this, props) || this;
        _this.margin = {
            top: 2,
            right: 0,
            bottom: 0,
            left: 0,
        };
        _this.state = {
            _points: null,
            _width: _this.props.width || 80,
            _height: _this.props.height || 20,
            _valueTextWidth: _this.props.valueTextWidth || 80,
        };
        return _this;
    }
    SparklineBase.prototype.componentDidMount = function () {
        var _this = this;
        var area = d3Area()
            /* eslint-disable @typescript-eslint/no-explicit-any */
            .x(function (d) { return _this.x(d.x); })
            .y0(this.state._height)
            /* eslint-disable @typescript-eslint/no-explicit-any */
            .y1(function (d) { return _this.y(d.y); })
            .curve(d3curveLinear);
        this.area = area;
        var line = d3Line()
            /* eslint-disable @typescript-eslint/no-explicit-any */
            .x(function (d) { return _this.x(d.x); })
            /* eslint-disable @typescript-eslint/no-explicit-any */
            .y(function (d) { return _this.y(d.y); })
            .curve(d3curveLinear);
        this.line = line;
        var points = this.props.data.lineChartData[0].data;
        /* eslint-disable @typescript-eslint/no-explicit-any */
        var _a = d3Extent(points, function (d) { return d.x; }), xMin = _a[0], xMax = _a[1];
        this.x = d3ScaleLinear()
            .domain([xMin, xMax])
            .range([this.margin.left, this.state._width - this.margin.right]);
        this.y = d3ScaleLinear()
            /* eslint-disable @typescript-eslint/no-explicit-any */
            .domain([0, d3Max(points, function (d) { return d.y; })])
            .range([this.state._height - this.margin.bottom, this.margin.top]);
        this.setState({
            _points: points,
        });
    };
    SparklineBase.prototype.drawSparkline = function () {
        return (React.createElement(React.Fragment, null,
            React.createElement("path", { className: "line", d: this.line(this.state._points), fill: 'transparent', opacity: 1, strokeWidth: 2, stroke: this.props.data.lineChartData[0].color }),
            React.createElement("path", { className: "area", d: this.area(this.state._points), opacity: 1, fillOpacity: 0.2, fill: this.props.data.lineChartData[0].color, "aria-label": "Sparkline with label " + this.props.data.lineChartData[0].legend })));
    };
    SparklineBase.prototype.render = function () {
        var classNames = getClassNames(this.props.styles, {
            theme: this.props.theme,
        });
        return (React.createElement(FocusZone, { direction: FocusZoneDirection.horizontal, isCircularNavigation: true, className: classNames.inlineBlock },
            React.createElement("div", { className: classNames.inlineBlock },
                this.state._width >= 50 && this.state._height >= 16 ? (React.createElement("svg", { width: this.state._width, height: this.state._height, "data-is-focusable": true }, this.state._points ? this.drawSparkline() : null)) : (React.createElement(React.Fragment, null)),
                this.props.showLegend && this.props.data.lineChartData[0].legend ? (React.createElement("svg", { width: this.state._valueTextWidth, height: this.state._height, "data-is-focusable": true },
                    React.createElement("text", { x: "0%", dx: 8, y: "100%", dy: -5, className: classNames.valueText }, this.props.data.lineChartData[0].legend))) : (React.createElement(React.Fragment, null)))));
    };
    return SparklineBase;
}(React.Component));
export { SparklineBase };
//# sourceMappingURL=Sparkline.base.js.map