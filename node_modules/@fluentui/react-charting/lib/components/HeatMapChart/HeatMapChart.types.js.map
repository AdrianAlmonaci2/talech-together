{"version":3,"file":"HeatMapChart.types.js","sourceRoot":"../src/","sources":["components/HeatMapChart/HeatMapChart.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';\nimport { ICalloutContentStyleProps, ICalloutContentStyles } from '@fluentui/react/lib/Callout';\nimport { IStyle } from '@fluentui/react/lib/Styling';\nimport {\n  ICartesianChartStyleProps,\n  ICartesianChartProps,\n  ICartesianChartStyles,\n} from '../CommonComponents/CartesianChart.types';\nimport { ILegendsProps } from '../Legends/Legends.types';\nimport { IHeatMapChartData } from '../../types/IDataPoint';\n\nexport interface IHeatMapChartProps extends Pick<ICartesianChartProps, Exclude<keyof ICartesianChartProps, 'styles'>> {\n  /**\n   * chart title for the chart\n   */\n  chartTitle?: string;\n  /**\n   * data to provide for Heat Map\n   */\n  data: IHeatMapChartData[];\n  /**\n   * The domain value for the color scale,\n   *\n   */\n  domainValuesForColorScale: number[];\n  /**\n   * The range values for the color scale,\n   * fill the array with colors in hex format\n   * note:- it should contain values exactly as many as values in the array\n   * `domainValuesForColorScale`\n   */\n  rangeValuesForColorScale: string[];\n  /**\n   * date formatter of x axis,\n   * if the x-axis data point are of date type then user can use this\n   * prop to format the date\n   * refer to https://github.com/d3/d3-time-format for string values\n   * @default '%b/%d'\n   */\n  xAxisDateFormatString?: string;\n  /**\n   * date formatter of y axis,\n   * if the y-axis data point are or date type then user can use this\n   * prop to format the date\n   * refer to https://github.com/d3/d3-time-format for string values\n   * @default '%b/%d'\n   */\n  yAxisDateFormatString?: string;\n  /**\n   * number formatter of x axis\n   * if the x-axis data pints are of number type then user can\n   * use this prop to format the number\n   * refer to https://github.com/d3/d3-format for string values\n   * @default '.2~s'\n   */\n  xAxisNumberFormatString?: string;\n  /**\n   * number formatter of y axis\n   * if the y-axis data pints are of number type then user can\n   * use this prop to format the number\n   * refer to https://github.com/d3/d3-format for string values\n   * @default '.2~s'\n   */\n  yAxisNumberFormatString?: string;\n  /**\n   * string formatter for x-axis.\n   * This prop only applies if the x-axis is of string type\n   *\n   * For the accessiblity reason we sort the x-axis data point given by the consumer in ascending\n   * order and then render in the x-axis. this behaviour would force the order of the data points.\n   * to overcome , user can give x-axis point names as p1 p2...etc and map those p1 and p2 to custom name.\n   * behind the scene the charting will actually sort the p1 and p2 and then we can attach the custom\n   * name to that point by using this prop, hence giving the us the flexiblity of the order in which\n   * label should render\n   *\n   * see the example file for the usage of the prop\n   */\n  xAxisStringFormatter?: (point: string) => string;\n\n  /**\n   * string formatter for y-axis.\n   * This prop only applies if the y-axis is of string type\n   *\n   * For the accessiblity reason we sort the x-axis data point given by the consumer in ascending\n   * order and then render in the y-axis. this behaviour would force the order of the data points.\n   * to overcome , user can give y-axis point names as p1 p2...etc and map those p1 and p2 to custom name.\n   * behind the scene the charting will actually sort the p1 and p2 and then we can attach the custom\n   * name to that point by using this prop, hence giving the us the flexiblity of the order in which\n   * label should render\n   *\n   * see the exaple file for the usage of the prop\n   */\n  yAxisStringFormatter?: (point: string) => string;\n  /**\n   * custom legend properties\n   */\n  legendProps?: Partial<ILegendsProps>;\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IHeatMapChartStyleProps, IHeatMapChartStyles>;\n\n  /**\n   * The prop used to define the culture to localized the numbers\n   */\n  culture?: string;\n}\nexport interface IHeatMapChartStyleProps extends ICartesianChartStyleProps {}\nexport interface IHeatMapChartStyles {\n  root?: IStyle;\n  text?: IStyle;\n  subComponentStyles: {\n    cartesianStyles: IStyleFunctionOrObject<ICartesianChartStyleProps, ICartesianChartStyles>;\n    calloutStyles: IStyleFunctionOrObject<ICalloutContentStyleProps, ICalloutContentStyles>;\n  };\n}\n"]}