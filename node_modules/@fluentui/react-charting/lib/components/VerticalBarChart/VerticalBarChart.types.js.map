{"version":3,"file":"VerticalBarChart.types.js","sourceRoot":"../src/","sources":["components/VerticalBarChart/VerticalBarChart.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IStyle } from '@fluentui/react/lib/Styling';\nimport { IRenderFunction, IStyleFunctionOrObject } from '@fluentui/react/lib/Utilities';\nimport {\n  ICartesianChartProps,\n  ICartesianChartStyleProps,\n  ICartesianChartStyles,\n  IVerticalBarChartDataPoint,\n} from '../../index';\nimport { ILineChartLineOptions } from '../../types/index';\n\nexport interface IVerticalBarChartProps extends ICartesianChartProps {\n  /**\n   * Data to render in the chart.\n   */\n  data?: IVerticalBarChartDataPoint[];\n\n  /**\n   * Define a custom callout renderer for a data point.\n   */\n  onRenderCalloutPerDataPoint?: IRenderFunction<IVerticalBarChartDataPoint>;\n\n  /**\n   * Width of each bar in the chart.\n   */\n  barWidth?: number;\n\n  /**\n   * Colors from which to select the color of each bar.\n   */\n  colors?: string[];\n\n  /**\n   * chart title for the chart\n   */\n  chartTitle?: string;\n\n  /**\n   * Legend text for the line datapoint in the chart\n   */\n  lineLegendText?: string;\n\n  /**\n   * color for the legend  of the line in the chart\n   * @default theme.yellow\n   */\n\n  lineLegendColor?: string;\n\n  /**\n   * This prop makes sure that all the bars are of same color.\n   * it will take the first color from the array of colors in\n   * prop `colors` or if  `colors` prop is not given then default color is  palette.blueLight\n   * @default false\n   */\n  useSingleColor?: boolean;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IVerticalBarChartStyleProps, IVerticalBarChartStyles>;\n\n  /**\n   * The prop used to define the culture to localized the numbers\n   */\n  culture?: string;\n\n  /**\n   * it's padding between bar's or lines in the graph\n   */\n  xAxisPadding?: number;\n\n  /**\n   * options for the line drawn\n   */\n  lineOptions?: ILineChartLineOptions;\n}\n\nexport interface IVerticalBarChartStyleProps extends ICartesianChartStyleProps {\n  /**\n   * color of the datapoint legend\n   */\n  legendColor?: string;\n}\n\nexport interface IVerticalBarChartStyles extends ICartesianChartStyles {\n  /**\n   * Style for the chart label.\n   * @deprecated\n   */\n  chartLabel?: IStyle;\n\n  /**\n   * Style for the line representing the domain of the x-axis.\n   * @deprecated\n   */\n  xAxisDomain?: IStyle;\n\n  /**\n   * Style for the lines representing the ticks along the x-axis.\n   * @deprecated\n   */\n  xAxisTicks?: IStyle;\n\n  /**\n   * Style for the text labeling each tick along the x-axis.\n   * @deprecated\n   */\n  xAxisText?: IStyle;\n\n  /**\n   * Style for the line representing the domain of the y-axis.\n   * @deprecated\n   */\n  yAxisDomain?: IStyle;\n\n  /**\n   * Style for the lines representing the ticks along the y-axis.\n   * @deprecated\n   */\n  yAxisTicks?: IStyle;\n\n  /**\n   * Style for the text labeling each tick along the y-axis.\n   * @deprecated\n   */\n  yAxisText?: IStyle;\n\n  /**\n   * Style to change the opacity of bars in dataviz when we hover on a single bar or legends\n   */\n  opacityChangeOnHover: IStyle;\n}\n"]}